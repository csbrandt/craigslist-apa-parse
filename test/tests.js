// Generated by CoffeeScript 1.8.0
(function() {
  var expect, fs, parser;

  parser = require('../');

  fs = require('fs');

  expect = require('expect.js');

  describe('parser', function() {
    var error, parsedPosts;
    parsedPosts = null;
    error = null;
    parser.parse(fs.readFileSync(__dirname + '/index.rss').toString(), function(err, posts) {
      parsedPosts = posts;
      return error = err;
    });
    it('should have no error', function() {
      return expect(error).to.not.be.ok();
    });
    it('should return 100 posts', function() {
      return expect(parsedPosts.length).to.equal(100);
    });
    it('should return 100 posts with a date', function() {
      var dates;
      dates = parsedPosts.filter(function(post) {
        return post.date;
      });
      return expect(dates.length).to.equal(100);
    });
    it('should return 100 posts with a title', function() {
      var titles;
      titles = parsedPosts.filter(function(post) {
        return post.title;
      });
      return expect(titles.length).to.equal(100);
    });
    it('should return 100 posts with a url', function() {
      var urls;
      urls = parsedPosts.filter(function(post) {
        return post.url;
      });
      return expect(urls.length).to.equal(100);
    });
    it('should return x posts with a location', function() {
      var locations;
      locations = parsedPosts.filter(function(post) {
        return post.location;
      });
      return expect(locations.length).to.equal(99);
    });
    it('should return x posts with a price', function() {
      var locations;
      locations = parsedPosts.filter(function(post) {
        return post.price;
      });
      return expect(locations.length).to.equal(96);
    });
    return it('should return x posts with bedrooms', function() {
      var locations;
      locations = parsedPosts.filter(function(post) {
        return post.bedroom;
      });
      return expect(locations.length).to.equal(90);
    });
  });

}).call(this);
